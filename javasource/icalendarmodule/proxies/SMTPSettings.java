// This file was generated by Mendix Modeler.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package icalendarmodule.proxies;

/**
 * 
 */
public class SMTPSettings
{
	private final com.mendix.systemwideinterfaces.core.IMendixObject sMTPSettingsMendixObject;

	private final com.mendix.systemwideinterfaces.core.IContext context;

	/**
	 * Internal name of this entity
	 */
	public static final java.lang.String entityName = "iCalendarModule.SMTPSettings";

	/**
	 * Enum describing members of this entity
	 */
	public enum MemberNames
	{
		SMTPHost("SMTPHost"),
		SMTPPort("SMTPPort"),
		SMTPUsername("SMTPUsername"),
		SMTPPassword("SMTPPassword"),
		SMTPEncryption("SMTPEncryption"),
		DefaultFromAddress("DefaultFromAddress"),
		SignaturePlain("SignaturePlain");

		private java.lang.String metaName;

		MemberNames(java.lang.String s)
		{
			metaName = s;
		}

		@Override
		public java.lang.String toString()
		{
			return metaName;
		}
	}

	public SMTPSettings(com.mendix.systemwideinterfaces.core.IContext context)
	{
		this(context, com.mendix.core.Core.instantiate(context, "iCalendarModule.SMTPSettings"));
	}

	protected SMTPSettings(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject sMTPSettingsMendixObject)
	{
		if (sMTPSettingsMendixObject == null)
			throw new java.lang.IllegalArgumentException("The given object cannot be null.");
		if (!com.mendix.core.Core.isSubClassOf("iCalendarModule.SMTPSettings", sMTPSettingsMendixObject.getType()))
			throw new java.lang.IllegalArgumentException("The given object is not a iCalendarModule.SMTPSettings");

		this.sMTPSettingsMendixObject = sMTPSettingsMendixObject;
		this.context = context;
	}

	/**
	 * @deprecated Use 'SMTPSettings.load(IContext, IMendixIdentifier)' instead.
	 */
	@Deprecated
	public static icalendarmodule.proxies.SMTPSettings initialize(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixIdentifier mendixIdentifier) throws com.mendix.core.CoreException
	{
		return icalendarmodule.proxies.SMTPSettings.load(context, mendixIdentifier);
	}

	/**
	 * Initialize a proxy using context (recommended). This context will be used for security checking when the get- and set-methods without context parameters are called.
	 * The get- and set-methods with context parameter should be used when for instance sudo access is necessary (IContext.getSudoContext() can be used to obtain sudo access).
	 */
	public static icalendarmodule.proxies.SMTPSettings initialize(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject mendixObject)
	{
		return new icalendarmodule.proxies.SMTPSettings(context, mendixObject);
	}

	public static icalendarmodule.proxies.SMTPSettings load(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixIdentifier mendixIdentifier) throws com.mendix.core.CoreException
	{
		com.mendix.systemwideinterfaces.core.IMendixObject mendixObject = com.mendix.core.Core.retrieveId(context, mendixIdentifier);
		return icalendarmodule.proxies.SMTPSettings.initialize(context, mendixObject);
	}

	public static java.util.List<icalendarmodule.proxies.SMTPSettings> load(com.mendix.systemwideinterfaces.core.IContext context, java.lang.String xpathConstraint) throws com.mendix.core.CoreException
	{
		java.util.List<icalendarmodule.proxies.SMTPSettings> result = new java.util.ArrayList<icalendarmodule.proxies.SMTPSettings>();
		for (com.mendix.systemwideinterfaces.core.IMendixObject obj : com.mendix.core.Core.retrieveXPathQuery(context, "//iCalendarModule.SMTPSettings" + xpathConstraint))
			result.add(icalendarmodule.proxies.SMTPSettings.initialize(context, obj));
		return result;
	}

	/**
	 * Commit the changes made on this proxy object.
	 */
	public final void commit() throws com.mendix.core.CoreException
	{
		com.mendix.core.Core.commit(context, getMendixObject());
	}

	/**
	 * Commit the changes made on this proxy object using the specified context.
	 */
	public final void commit(com.mendix.systemwideinterfaces.core.IContext context) throws com.mendix.core.CoreException
	{
		com.mendix.core.Core.commit(context, getMendixObject());
	}

	/**
	 * Delete the object.
	 */
	public final void delete()
	{
		com.mendix.core.Core.delete(context, getMendixObject());
	}

	/**
	 * Delete the object using the specified context.
	 */
	public final void delete(com.mendix.systemwideinterfaces.core.IContext context)
	{
		com.mendix.core.Core.delete(context, getMendixObject());
	}
	/**
	 * @return value of SMTPHost
	 */
	public final String getSMTPHost()
	{
		return getSMTPHost(getContext());
	}

	/**
	 * @param context
	 * @return value of SMTPHost
	 */
	public final String getSMTPHost(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (String) getMendixObject().getValue(context, MemberNames.SMTPHost.toString());
	}

	/**
	 * Set value of SMTPHost
	 * @param smtphost
	 */
	public final void setSMTPHost(String smtphost)
	{
		setSMTPHost(getContext(), smtphost);
	}

	/**
	 * Set value of SMTPHost
	 * @param context
	 * @param smtphost
	 */
	public final void setSMTPHost(com.mendix.systemwideinterfaces.core.IContext context, String smtphost)
	{
		getMendixObject().setValue(context, MemberNames.SMTPHost.toString(), smtphost);
	}

	/**
	 * @return value of SMTPPort
	 */
	public final Integer getSMTPPort()
	{
		return getSMTPPort(getContext());
	}

	/**
	 * @param context
	 * @return value of SMTPPort
	 */
	public final Integer getSMTPPort(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (Integer) getMendixObject().getValue(context, MemberNames.SMTPPort.toString());
	}

	/**
	 * Set value of SMTPPort
	 * @param smtpport
	 */
	public final void setSMTPPort(Integer smtpport)
	{
		setSMTPPort(getContext(), smtpport);
	}

	/**
	 * Set value of SMTPPort
	 * @param context
	 * @param smtpport
	 */
	public final void setSMTPPort(com.mendix.systemwideinterfaces.core.IContext context, Integer smtpport)
	{
		getMendixObject().setValue(context, MemberNames.SMTPPort.toString(), smtpport);
	}

	/**
	 * @return value of SMTPUsername
	 */
	public final String getSMTPUsername()
	{
		return getSMTPUsername(getContext());
	}

	/**
	 * @param context
	 * @return value of SMTPUsername
	 */
	public final String getSMTPUsername(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (String) getMendixObject().getValue(context, MemberNames.SMTPUsername.toString());
	}

	/**
	 * Set value of SMTPUsername
	 * @param smtpusername
	 */
	public final void setSMTPUsername(String smtpusername)
	{
		setSMTPUsername(getContext(), smtpusername);
	}

	/**
	 * Set value of SMTPUsername
	 * @param context
	 * @param smtpusername
	 */
	public final void setSMTPUsername(com.mendix.systemwideinterfaces.core.IContext context, String smtpusername)
	{
		getMendixObject().setValue(context, MemberNames.SMTPUsername.toString(), smtpusername);
	}

	/**
	 * @return value of SMTPPassword
	 */
	public final String getSMTPPassword()
	{
		return getSMTPPassword(getContext());
	}

	/**
	 * @param context
	 * @return value of SMTPPassword
	 */
	public final String getSMTPPassword(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (String) getMendixObject().getValue(context, MemberNames.SMTPPassword.toString());
	}

	/**
	 * Set value of SMTPPassword
	 * @param smtppassword
	 */
	public final void setSMTPPassword(String smtppassword)
	{
		setSMTPPassword(getContext(), smtppassword);
	}

	/**
	 * Set value of SMTPPassword
	 * @param context
	 * @param smtppassword
	 */
	public final void setSMTPPassword(com.mendix.systemwideinterfaces.core.IContext context, String smtppassword)
	{
		getMendixObject().setValue(context, MemberNames.SMTPPassword.toString(), smtppassword);
	}

	/**
	 * Set value of SMTPEncryption
	 * @param smtpencryption
	 */
	public final icalendarmodule.proxies.Encryption getSMTPEncryption()
	{
		return getSMTPEncryption(getContext());
	}

	/**
	 * @param context
	 * @return value of SMTPEncryption
	 */
	public final icalendarmodule.proxies.Encryption getSMTPEncryption(com.mendix.systemwideinterfaces.core.IContext context)
	{
		Object obj = getMendixObject().getValue(context, MemberNames.SMTPEncryption.toString());
		if (obj == null)
			return null;

		return icalendarmodule.proxies.Encryption.valueOf((java.lang.String) obj);
	}

	/**
	 * Set value of SMTPEncryption
	 * @param smtpencryption
	 */
	public final void setSMTPEncryption(icalendarmodule.proxies.Encryption smtpencryption)
	{
		setSMTPEncryption(getContext(), smtpencryption);
	}

	/**
	 * Set value of SMTPEncryption
	 * @param context
	 * @param smtpencryption
	 */
	public final void setSMTPEncryption(com.mendix.systemwideinterfaces.core.IContext context, icalendarmodule.proxies.Encryption smtpencryption)
	{
		if (smtpencryption != null)
			getMendixObject().setValue(context, MemberNames.SMTPEncryption.toString(), smtpencryption.toString());
		else
			getMendixObject().setValue(context, MemberNames.SMTPEncryption.toString(), null);
	}

	/**
	 * @return value of DefaultFromAddress
	 */
	public final String getDefaultFromAddress()
	{
		return getDefaultFromAddress(getContext());
	}

	/**
	 * @param context
	 * @return value of DefaultFromAddress
	 */
	public final String getDefaultFromAddress(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (String) getMendixObject().getValue(context, MemberNames.DefaultFromAddress.toString());
	}

	/**
	 * Set value of DefaultFromAddress
	 * @param defaultfromaddress
	 */
	public final void setDefaultFromAddress(String defaultfromaddress)
	{
		setDefaultFromAddress(getContext(), defaultfromaddress);
	}

	/**
	 * Set value of DefaultFromAddress
	 * @param context
	 * @param defaultfromaddress
	 */
	public final void setDefaultFromAddress(com.mendix.systemwideinterfaces.core.IContext context, String defaultfromaddress)
	{
		getMendixObject().setValue(context, MemberNames.DefaultFromAddress.toString(), defaultfromaddress);
	}

	/**
	 * @return value of SignaturePlain
	 */
	public final String getSignaturePlain()
	{
		return getSignaturePlain(getContext());
	}

	/**
	 * @param context
	 * @return value of SignaturePlain
	 */
	public final String getSignaturePlain(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (String) getMendixObject().getValue(context, MemberNames.SignaturePlain.toString());
	}

	/**
	 * Set value of SignaturePlain
	 * @param signatureplain
	 */
	public final void setSignaturePlain(String signatureplain)
	{
		setSignaturePlain(getContext(), signatureplain);
	}

	/**
	 * Set value of SignaturePlain
	 * @param context
	 * @param signatureplain
	 */
	public final void setSignaturePlain(com.mendix.systemwideinterfaces.core.IContext context, String signatureplain)
	{
		getMendixObject().setValue(context, MemberNames.SignaturePlain.toString(), signatureplain);
	}

	/**
	 * @return the IMendixObject instance of this proxy for use in the Core interface.
	 */
	public final com.mendix.systemwideinterfaces.core.IMendixObject getMendixObject()
	{
		return sMTPSettingsMendixObject;
	}

	/**
	 * @return the IContext instance of this proxy, or null if no IContext instance was specified at initialization.
	 */
	public final com.mendix.systemwideinterfaces.core.IContext getContext()
	{
		return context;
	}

	@Override
	public boolean equals(Object obj)
	{
		if (obj == this)
			return true;

		if (obj != null && getClass().equals(obj.getClass()))
		{
			final icalendarmodule.proxies.SMTPSettings that = (icalendarmodule.proxies.SMTPSettings) obj;
			return getMendixObject().equals(that.getMendixObject());
		}
		return false;
	}

	@Override
	public int hashCode()
	{
		return getMendixObject().hashCode();
	}

	/**
	 * @return String name of this class
	 */
	public static java.lang.String getType()
	{
		return "iCalendarModule.SMTPSettings";
	}

	/**
	 * @return String GUID from this object, format: ID_0000000000
	 * @deprecated Use getMendixObject().getId().toLong() to get a unique identifier for this object.
	 */
	@Deprecated
	public java.lang.String getGUID()
	{
		return "ID_" + getMendixObject().getId().toLong();
	}
}
